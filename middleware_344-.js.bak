const baseURL = 'http://localhost:8080/otto' //注意与 autman - 系统参数 - 系统配置 - autMan服务端口 保持一致

const axios = require('axios');
const middlewareAxios = axios.create({ baseURL, 'timeout': 5000, 'headers': { 'Content-Type': 'application/json' } })

/** 获取本地服务响应
 * @param {string} path 本地服务路由
 * @param {number} timeout 超时时间
 */
const accessLocalService = (path, body = null, timeout = undefined) =>
  middlewareAxios.post(path, body, { timeout })
    .then(({ status, statusText, headers, config, request, data }) => data?.data)
    .catch(({ message, name, code, config, request, response }) => console.error(path, name, code, message));

module.exports = class middleware {

  /**
   * 消息监听函数和回调函数
   * @param {string} imtype 消息类型
   * @param {string} chatid 群组ID
   * @param {string} userid 用户ID
   * @param {function} callback 回调函数
   */
  static addMsgListener = (imtype, chatid, userid, callback) => {
    const options = {
      method: 'POST',
      body: JSON.stringify({ imtype, chatid, userid }),
      headers: {
        'Content-Type': 'application/json',
      },
    };
    const req = http.request(middlewareAxios.baseURL, options, (res) => {
      res.setEncoding('utf8');
      let responseData = '';
      res.on('data', (chunk) => {
        responseData += chunk;
      });
      res.on('end', () => {
        callback(responseData);
      });
    });
  }

  // 获取发送者ID
  static getSenderID = () => console.log(process.argv) || process.argv[1];

  /** 渲染html
   * @param {string} template swig 格式 html 模板
   * @param {string} selector css选择器
   * @param {object} data 输入数据
   * @returns {string} base64格式图片数据
   */
  static render = (template, selector, data) =>
    accessLocalService(
      `/render`,
      {
        file: "",//使用内置模板时
        source: template,//使用自定义模板时填写代码
        selector: selector,//选择器，即渲染哪部分
        data: data//数据
      },
      5000
    );

  // 推送消息
  static push = (imType, groupCode, userID, title, content) =>
    accessLocalService(`/push`,
      {
        imType: imType,
        groupCode: groupCode,
        userID,
        title: title ?? "",
        content,
      },
      5000
    );

  // 获取机器人名称
  static name = () => accessLocalService(`/name`);

  // 获取机器人域名或公网地址
  static domain = () => accessLocalService(`/domain`);

  // 获取autMan内置端口
  static port = () => accessLocalService(`/port`);

  // 获取机器id
  static machineId = () => accessLocalService(`/machineId`);

  // 获取机器人版本
  static version = () => accessLocalService(`/version`);

  // 获取数据库数据
  static get = (key) => accessLocalService(`/get`, { key });

  // 设置数据库数据
  static set = (key, value) => accessLocalService(`/set`, { key, value });

  // 删除数据库数据
  static del = (key) => accessLocalService(`/del`, { key });

  // 获取指定数据库指定的key值
  static bucketGet = (bucket, key) => accessLocalService(`/bucketGet`, { bucket, key });

  // 设置指定数据库指定的key值
  static bucketSet = (bucket, key, value) => accessLocalService(`/bucketSet`, { bucket, key, value });

  // 删除指定数据库指定key的值
  static bucketDel = (bucket, key) => accessLocalService(`/bucketDel`, { bucket, key });

  // 获取指定数据库所有值为value的keys
  static bucketKeys = (bucket, value) => accessLocalService(`/bucketKeys`, { bucket, value });

  // 获取指定数据桶内所有的key集合
  static bucketAllKeys = (bucket) => accessLocalService(`/bucketAllKeys`, { bucket });

  // 获取指定数据桶内所有的key value集合
  static bucketAll = (bucket) => accessLocalService(`/bucketAll`, { bucket });

  // 通知管理员
  static notifyMasters = (content, imtypes = []) => accessLocalService(`/notifyMasters`, { content, imtypes });

  // 当前系统咖啡码激活状态
  static coffee = () => accessLocalService(`/coffee`);

  // 京东、淘宝、拼多多转链推广
  static spread = (msg) => accessLocalService(`/spread`, { msg });

  //获取历史消息 最多近100条消息
  static getHistoryMessages = (imtype) => accessLocalService(`/getHistoryMessages`, { imtype }, 5000);

  static Sender = class Sender {
    constructor(senderid) {

      // 发送者ID,格式：in64时间戳,
      this.senderID = senderid;

      // 获取指定数据库指定的key值
      this.bucketGet = (bucket, key) => accessLocalService(`/bucketGet`, { senderid, bucket, key });

      // 设置指定数据库指定的key值
      this.bucketSet = (bucket, key, value) => accessLocalService(`/bucketSet`, { senderid, bucket, key, value });

      // 删除指定数据库指定key的值
      this.bucketDel = (bucket, key) => accessLocalService(`/bucketDel`, { senderid, bucket, key });

      // 获取指定数据库所有值为value的keys
      this.bucketKeys = (bucket, value) => accessLocalService(`/bucketKeys`, { senderid, bucket, value });

      // 获取指定数据桶内所有的key集合
      this.bucketAllKeys = (bucket) => accessLocalService(`/bucketAllKeys`, { senderid, bucket });

      // 获取指定数据桶内所有的key value集合
      this.bucketAll = (bucket) => accessLocalService(`/bucketAll`, { senderid, bucket });
      this.setContinue = () => accessLocalService(`/continue`, { senderid });

      // 路由路径
      this.getRouterPath = () => accessLocalService(`/getRouterPath`, { senderid });

      // 路由参数
      this.getRouterParams = () => accessLocalService(`/getRouterParams`, { senderid });

      // 路由方法
      this.getRouterMethod = () => accessLocalService(`/getRouterMethod`, { senderid });

      // 路由请求头
      this.getRouterHeaders = () => accessLocalService(`/getRouterHeaders`, { senderid });

      // 路由cookies
      this.getRouterCookies = () => accessLocalService(`/getRouterCookies`, { senderid });

      // 路由请求体
      this.getRouterBody = () => accessLocalService(`/getRouterBody`, { senderid });

      // 获取发送者渠道
      this.getImtype = () => accessLocalService(`/getImtype`, { senderid });

      /** 获取当前用户id
       * @returns {string} 注意：这里是base64编码后的userid
       */
      this.getUserID = () => accessLocalService(`/getUserID`, { senderid });

      // 获取当前用户名
      this.getUserName = () => accessLocalService(`/getUserName`, { senderid });

      // 获取用户头像url
      this.getUserAvatarUrl = () => accessLocalService(`/getUserAvatarUrl`, { senderid });

      // 获取当前群组id
      this.getChatID = () => accessLocalService(`/getChatID`, { senderid });

      // 获取当前群组名称
      this.getGroupName = () => accessLocalService(`/getGroupName`, { senderid });

      // 是否管理员
      this.isAdmin = () => accessLocalService(`/isAdmin`, { senderid });

      // 获取消息
      this.getMessage = () => accessLocalService(`/getMessage`, { senderid });

      // 获取消息ID
      this.getMessageID = () => accessLocalService(`/getMessageID`, { senderid });

      // 获取历史消息ids
      this.getHistoryMessageIDs = (number) => accessLocalService(`/getHistory`, { senderid, number });

      // 撤回消息
      this.recallMessage = (messageid) => accessLocalService(`/recallMessage`, { senderid, messageid });

      // 模拟新消息输入，即将消息发送者的消息修改为新的内容，重新送往autMan内部处理
      this.breakIn = (content) => accessLocalService(`/breakIn`, { senderid, content });

      // 获取匹配的文本参数
      this.param = (index) => accessLocalService(`/param`, { senderid, index });

      // 回复文本消息
      this.reply = (text) => accessLocalService(`/sendText`, { senderid, text: typeof text === 'string' ? text : JSON.stringify(text) });

      // 编辑消息
      this.edit = (text) => accessLocalService(`/editText`, { senderid, text });

      //回复markdown消息
      this.replyMarkdown = (markdown) => accessLocalService(`/sendMarkdown`, { senderid, markdown });

      // 回复图片消息
      this.replyImage = (imageurl) => accessLocalService(`/sendImage`, { senderid, imageurl });

      // 回复语音消息
      this.replyVoice = (voiceurl) => accessLocalService(`/sendVoice`, { senderid, voiceurl });

      // 回复视频消息
      this.replyVideo = (videourl) => accessLocalService(`/sendVideo`, { senderid, videourl });

      //等待用户输入
      this.listen = (timeout) => accessLocalService(`/listen`, { senderid, timeout }, timeout);

      //等待用户输入,timeout为超时时间，单位为毫秒,recallDuration为撤回用户输入的延迟时间，单位为毫秒，0是不撤回，forGroup为bool值true或false，是否接收群聊所有成员的输入
      this.input = (time, recallDuration, forGroup) => accessLocalService(
        `/input`,
        {
          senderid,
          time,
          recallDuration,
          forGroup
        },
        time
      );

      //等待支付
      this.waitPay = (exitcode, timeout) => accessLocalService(`/waitPay`, { senderid, exitcode, timeout }, timeout);

      //是否处于等待支付状态
      this.atWaitPay = () => accessLocalService(`/atWaitPay`, { senderid });

      //邀请入群
      this.groupInviteIn = (friend, group) => accessLocalService(`/groupInviteIn`, { senderid, friend, group });

      //踢群
      this.groupKick = (userid) => accessLocalService(`/groupKick`, { senderid, userid });

      //禁言
      this.groupBan = (userid, timeout) => accessLocalService(`/groupBan`, { senderid, userid, timeout });

      //解除禁言
      this.groupUnban = (userid) => accessLocalService(`/groupUnban`, { senderid, userid });

      //全员禁言
      this.groupWholeBan = () => accessLocalService(`/groupWholeBan`, { senderid });

      //解除全员禁言
      this.groupWholeUnban = () => accessLocalService(`/groupWholeUnban`, { senderid });

      //发送群公告
      this.groupNoticeSend = (notice) => accessLocalService(`/groupNoticeSend`, { senderid, notice });

      //获取当前处理流程的插件名
      this.getPluginName = () => accessLocalService(`/getPluginName`, { senderid });

      //获取当前处理流程的插件版本
      this.getPluginVersion = () => accessLocalService(`/getPluginVersion`, { senderid });
    };
  }

  static Cron = class Cron {
    constructor() {

      // 获取定时指令集合
      this.getCrons = () => accessLocalService(`/croncmdsGet`);

      //获取某个定时指令
      this.getCron = (id) => accessLocalService(`/croncmdsGet`, { id });

      //添加定时指令,返回id
      this.addCron = (cron, cmd, isToSelf, toOthers, memo, disguiseImtype, disguiseGroup, disguiseUser) => accessLocalService(`/croncmdsAdd`, { cron, cmd, isToSelf, toOthers, memo, disguiseImtype, disguiseGroup, disguiseUser });

      //修改定时指令
      this.updateCron = (id, cron, cmd, isToSelf, toOthers, memo) => accessLocalService(`/croncmdsUpd`, { id, cron, cmd, isToSelf, toOthers, memo, disguiseImtype, disguiseGroup, disguiseUser });

      //删除定时指令
      this.delCron = (id) => accessLocalService(`/croncmdsDel`, { id });
    }
  }
}